{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","deleteNote","label","important","className","content","onClick","Notification","message","baseURL","noteService","getAll","request","axios","get","nonExisting","id","date","then","response","data","concat","create","newObject","post","update","put","remove","delete","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","initialNotes","notesToShow","filter","map","selectedNote","find","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","noteToDelete","window","confirm","deletionResponse","notesUpdate","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4e6f21b5.chunk.js","sourcesContent":["import React from 'react';\n\nconst Note = ({ note, toggleImportance, deleteNote }) => {\n  const label = note.important ? 'make not important' : 'make important';\n\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n      <button onClick={deleteNote}>Delete Note</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import React from 'react';\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n\n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\nexport default Notification;","import axios from 'axios';\nconst baseURL = 'http://localhost:3001/api/notes';\n\nconst getAll = () => {\n  const request = axios.get(baseURL);\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting));\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseURL, newObject);\n  return request.then(response => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseURL}/${id}`, newObject);\n  return request.then(response => response.data);\n};\n\nconst remove = (id) =>{\n  const request = axios.delete(`${baseURL}/${id}`);\n  return request.then(response=> response.data);\n}\n\nconst noteService = {\n    getAll,\n    create,\n    update,\n    remove\n};\n\nexport default noteService;","import React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport Notification from './components/Notification';\nimport noteService from './services/notes';\nimport './index.css'\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('a new note...');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const hook = () => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  };\n  useEffect(hook, []);\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    };\n\n    noteService.create(noteObject).then((returnedNote) => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote('');\n    });\n  };\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  const toggleImportanceOf = (id) => {\n    const selectedNote = notes.find((note) => note.id === id);\n    const changedNote = { ...selectedNote, important: !selectedNote.important };\n    noteService.update(id, changedNote).then((returnedNote) => {\n      setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n    }).catch(error => {\n      setErrorMessage(\n        `Note '${selectedNote.content}' was already removed from server`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n      setNotes(notes.filter(note => note.id !== id))\n    });\n  };\n\n  const deleteNote = (noteToDelete, id) =>{\n    if (window.confirm(`Delete note:  ${noteToDelete.content}? `)) {\n      noteService.remove(id).then((deletionResponse) => {\n        const notesUpdate = notes.filter((note) => note.id !== id);\n        setNotes(notesUpdate);\n      });\n    }\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter((note) => note.important === true);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n            deleteNote={() => deleteNote(note, note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type='submit'>save</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}